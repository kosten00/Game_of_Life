package life.model;

/**
 * Keeps state of game cells in current and next generation in boolean values.
 * <p>
 * Before each game iteration alive status for next generation is written.
 * On each game iteration (switching generations, which is drawn on game board)
 * alive status switches from next generation to current generation and than
 * turns to false for next iteration check.
 * <p>
 * Class instances are created and methods are called in game model {@link GameModel} class.
 *
 * @Author Konstantin Vasliev
 * @Version 1.0
 */
public class Cell {
    private boolean isAliveCurrentGen;
    private boolean isAliveNextGen;

    /**
     * Constructs cell with alive status for next generation.
     * This status would migrate to isAliveCurrentGen field before game board is drawn.
     * This helped to avoid additional method in game model for starting new game.
     *
     * @param isAliveNextGen Value generated by random only on starting new or resetting game.
     */
    public Cell(boolean isAliveNextGen) {
        isAliveCurrentGen = false;
        this.isAliveNextGen = isAliveNextGen;
    }

    public boolean isAliveCurrentGen() {
        return isAliveCurrentGen;
    }

    public void setAliveCurrentGen(boolean aliveCurrentGeneration) {
        isAliveCurrentGen = aliveCurrentGeneration;
    }

    public boolean isAliveNextGen() {
        return isAliveNextGen;
    }

    public void setAliveNextGen(boolean aliveNextGeneration) {
        isAliveNextGen = aliveNextGeneration;
    }
}
